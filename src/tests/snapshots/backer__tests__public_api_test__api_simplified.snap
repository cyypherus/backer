---
source: src/tests/public_api_test.rs
expression: public_api_simplified
---
pub mod backer
pub mod backer::models
pub enum backer::models::Align
pub backer::models::Align::Bottom
pub backer::models::Align::BottomCenter
pub backer::models::Align::BottomLeading
pub backer::models::Align::BottomTrailing
pub backer::models::Align::CenterCenter
pub backer::models::Align::CenterLeading
pub backer::models::Align::CenterTrailing
pub backer::models::Align::CenterX
pub backer::models::Align::CenterY
pub backer::models::Align::Leading
pub backer::models::Align::Top
pub backer::models::Align::TopCenter
pub backer::models::Align::TopLeading
pub backer::models::Align::TopTrailing
pub backer::models::Align::Trailing
pub struct backer::models::Area
pub backer::models::Area::height: f32
pub backer::models::Area::width: f32
pub backer::models::Area::x: f32
pub backer::models::Area::y: f32
impl backer::models::Area
pub fn backer::models::Area::new(x: f32, y: f32, width: f32, height: f32) -> Self
pub mod backer::nodes
pub fn backer::nodes::area_reader<'nodes, State>(func: impl core::ops::function::Fn(backer::models::Area, &mut State) -> backer::Node<'nodes, State> + 'static) -> backer::Node<'nodes, State>
pub fn backer::nodes::column<State>(elements: alloc::vec::Vec<backer::Node<'_, State>>) -> backer::Node<'_, State>
pub fn backer::nodes::column_spaced<State>(spacing: f32, elements: alloc::vec::Vec<backer::Node<'_, State>>) -> backer::Node<'_, State>
pub fn backer::nodes::draw<'nodes, State>(drawable_fn: impl core::ops::function::Fn(backer::models::Area, &mut State) + 'static) -> backer::Node<'nodes, State>
pub fn backer::nodes::draw_object<'nodes, State>(drawable: impl backer::traits::Drawable<State> + 'nodes) -> backer::Node<'nodes, State>
pub fn backer::nodes::dynamic<'nodes, State>(func: impl core::ops::function::Fn(&mut State) -> backer::Node<'nodes, State> + 'nodes) -> backer::Node<'nodes, State>
pub fn backer::nodes::empty<'nodes, State>() -> backer::Node<'nodes, State>
pub fn backer::nodes::group<State>(elements: alloc::vec::Vec<backer::Node<'_, State>>) -> backer::Node<'_, State>
pub fn backer::nodes::row<State>(elements: alloc::vec::Vec<backer::Node<'_, State>>) -> backer::Node<'_, State>
pub fn backer::nodes::row_spaced<State>(spacing: f32, elements: alloc::vec::Vec<backer::Node<'_, State>>) -> backer::Node<'_, State>
pub fn backer::nodes::scope<'nodes, State, Scoped: 'nodes>(scope: impl core::ops::function::Fn(&mut State) -> &mut Scoped + 'nodes, node: backer::Node<'nodes, Scoped>) -> backer::Node<'nodes, State>
pub fn backer::nodes::scope_owned<'nodes, State, Scoped: 'nodes>(scope: impl core::ops::function::Fn(&mut State) -> Scoped + 'nodes, embed: impl core::ops::function::Fn(&mut State, Scoped) + 'nodes, node: backer::Node<'nodes, Scoped>) -> backer::Node<'nodes, State>
pub fn backer::nodes::scope_unwrap<'nodes, State, Scoped: 'nodes>(scope: impl core::ops::function::Fn(&mut State) -> &mut core::option::Option<Scoped> + 'nodes, node: backer::Node<'nodes, Scoped>) -> backer::Node<'nodes, State>
pub fn backer::nodes::space<'nodes, State>() -> backer::Node<'nodes, State>
pub fn backer::nodes::stack<State>(elements: alloc::vec::Vec<backer::Node<'_, State>>) -> backer::Node<'_, State>
pub mod backer::traits
pub trait backer::traits::Drawable<State>
pub fn backer::traits::Drawable::draw(&mut self, area: backer::models::Area, state: &mut State, visible: bool)
pub struct backer::Layout<'nodes, State>
impl<'nodes, State> backer::Layout<'nodes, State>
pub fn backer::Layout<'nodes, State>::new(tree: backer::Node<'nodes, State>) -> Self
impl<State> backer::Layout<'_, State>
pub fn backer::Layout<'_, State>::draw(&mut self, area: backer::models::Area, state: &mut State)
pub struct backer::Node<'nodes, State>
impl<'nodes, State> backer::Node<'nodes, State>
pub fn backer::Node<'nodes, State>::align(self, align: backer::models::Align) -> Self
pub fn backer::Node<'nodes, State>::align_contents(self, align: backer::models::Align) -> Self
pub fn backer::Node<'nodes, State>::aspect(self, ratio: f32) -> Self
pub fn backer::Node<'nodes, State>::attach_over(self, node: Self) -> Self
pub fn backer::Node<'nodes, State>::attach_under(self, node: Self) -> Self
pub fn backer::Node<'nodes, State>::expand(self) -> Self
pub fn backer::Node<'nodes, State>::expand_x(self) -> Self
pub fn backer::Node<'nodes, State>::expand_y(self) -> Self
pub fn backer::Node<'nodes, State>::height(self, height: f32) -> Self
pub fn backer::Node<'nodes, State>::height_range<R>(self, range: R) -> Self where R: core::ops::range::RangeBounds<f32>
pub fn backer::Node<'nodes, State>::offset(self, offset_x: f32, offset_y: f32) -> backer::Node<'nodes, State>
pub fn backer::Node<'nodes, State>::offset_x(self, amount: f32) -> backer::Node<'nodes, State>
pub fn backer::Node<'nodes, State>::offset_y(self, amount: f32) -> backer::Node<'nodes, State>
pub fn backer::Node<'nodes, State>::pad(self, amount: f32) -> backer::Node<'nodes, State>
pub fn backer::Node<'nodes, State>::pad_bottom(self, amount: f32) -> backer::Node<'nodes, State>
pub fn backer::Node<'nodes, State>::pad_leading(self, amount: f32) -> backer::Node<'nodes, State>
pub fn backer::Node<'nodes, State>::pad_top(self, amount: f32) -> backer::Node<'nodes, State>
pub fn backer::Node<'nodes, State>::pad_trailing(self, amount: f32) -> backer::Node<'nodes, State>
pub fn backer::Node<'nodes, State>::pad_x(self, amount: f32) -> backer::Node<'nodes, State>
pub fn backer::Node<'nodes, State>::pad_y(self, amount: f32) -> backer::Node<'nodes, State>
pub fn backer::Node<'nodes, State>::visible(self, visibility: bool) -> Self
pub fn backer::Node<'nodes, State>::width(self, width: f32) -> Self
pub fn backer::Node<'nodes, State>::width_range<R>(self, range: R) -> Self where R: core::ops::range::RangeBounds<f32>
impl<State> backer::Node<'_, State>
pub fn backer::Node<'_, State>::dynamic_height(self, f: impl core::ops::function::Fn(f32, &mut State) -> f32 + 'static) -> Self
pub fn backer::Node<'_, State>::dynamic_width(self, f: impl core::ops::function::Fn(f32, &mut State) -> f32 + 'static) -> Self
impl<State> core::fmt::Debug for backer::Node<'_, State>
pub fn backer::Node<'_, State>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
